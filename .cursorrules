# Cursor Rules - AI Memory System
# Project: @yourox/ai-solver
# Type: general
# Generated: 2025-08-13T22:06:46.267Z
# Memories Used: 16

## Project Context
You are working on a general project using openai, chalk, ora, commander.

## Learned Patterns & Best Practices
â€¢ Always use TypeScript for new projects
â€¢ Implement proper error handling with try-catch blocks
â€¢ Always use environment variables for API keys, never hardcode them
â€¢ Use Prisma ORM for type-safe database operations
â€¢ Define TypeScript interfaces and types for better type safety
â€¢ Use Zod for runtime type validation and schema definition
â€¢ Cherry-picked Nextacular features for multi-tenant: workspace management, team invitations, Stripe billing integration. Option 2 approach as chosen by user.
â€¢ Multi-tenant services extracted from Nextacular are located in src/lib/multi-tenant/services with workspace.ts, billing.ts, and team.ts
â€¢ This is the rush2.ai automation platform project, NOT vite-react-typescript-starter. Always use port 3001 for Next.js to avoid conflicts.
â€¢ Use Nextacular as the multi-tenant SaaS layer for rush2.ai, as specified in the PRD. Architecture: Multi-Tenant SaaS Layer (Nextacular) + Automation Engine (ActivePieces)
â€¢ ActivePieces is running on port 8080 for workflow automation. Redis on port 6381. Always test with Playwright before claiming features work.
â€¢ Integrate Stripe for payment processing
â€¢ Rush2.ai main app runs on port 3001. ActivePieces runs on port 8080. Always use npm run dev to start the main app.
â€¢ Use NextAuth.js with Prisma adapter for authentication
â€¢ ActivePieces is running on port 8080 with standalone PostgreSQL on port 5434. Use docker-compose.activepieces-standalone.yml for management.
â€¢ Railway Database: Host=switchyard.proxy.rlwy.net Port=13969 DB=railway User=postgres. This is the production database for rush2.ai.

## Critical Rules (High Importance)
âš¡ [PREFERENCE] Always use TypeScript for new projects
âš¡ [ARCHITECTURE] Use Prisma ORM for type-safe database operations
âš¡ [VALIDATION] Use Zod for runtime type validation and schema definition
âš¡ [AUTHENTICATION] Use NextAuth.js with Prisma adapter for authentication
âš¡ [PAYMENTS] Integrate Stripe for payment processing
âš¡ [ERROR_HANDLING] Implement proper error handling with try-catch blocks
âš¡ [ARCHITECTURE] Use Nextacular as the multi-tenant SaaS layer for rush2.ai, as specified in the PRD. Architecture: Multi-Tenant SaaS Layer (Nextacular) + Automation Engine (ActivePieces)
âš¡ [INFRASTRUCTURE] ActivePieces is running on port 8080 for workflow automation. Redis on port 6381. Always test with Playwright before claiming features work.
âš¡ [ARCHITECTURE] Multi-tenant services extracted from Nextacular are located in src/lib/multi-tenant/services with workspace.ts, billing.ts, and team.ts
âš¡ [ARCHITECTURE] Cherry-picked Nextacular features for multi-tenant: workspace management, team invitations, Stripe billing integration. Option 2 approach as chosen by user.

## Code Style Guidelines
â€¢ Prefer functional and declarative programming patterns
â€¢ Use TypeScript for better type safety when possible
â€¢ Write self-documenting code with clear variable names
â€¢ Add error handling and edge case management
â€¢ Include comments for complex logic

## Architecture Principles
â€¢ Keep functions and components small and focused
â€¢ Separate concerns (business logic, UI, data)
â€¢ Use dependency injection for testability
â€¢ Follow SOLID principles where applicable
â€¢ Implement proper error boundaries

## Testing & Quality
â€¢ Write tests for critical business logic
â€¢ Use meaningful test descriptions
â€¢ Mock external dependencies
â€¢ Aim for high code coverage on important paths

## Performance Considerations
â€¢ Optimize for readability first, performance second
â€¢ Use lazy loading and code splitting where beneficial
â€¢ Implement proper caching strategies
â€¢ Monitor bundle sizes

## AI Assistant Instructions
â€¢ Apply these learned patterns consistently
â€¢ Suggest improvements based on these memories
â€¢ Flag violations of important rules
â€¢ Adapt suggestions to the project type (general)

---
ðŸ’¡ To add new memories: cursor-memory remember "your pattern or preference"
ðŸ”„ To refresh: cursor-memory sync
